//ebf code
#include <linux/bpf.h>
#include <linux/if_ether.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <bpf/bpf_helpers.h>
#include <bpf/bpf_tracing.h>
#include <bpf/bpf_core_read.h>

// Map to hold the allowed port number, initialized with default value 4040
struct {
    __uint(type, BPF_MAP_TYPE_ARRAY);
    __uint(max_entries, 1);
    __type(key, int);
    __type(value, __u16);
} allowed_port_map SEC(".maps");

// Map to hold the PID of the allowed process
struct {
    __uint(type, BPF_MAP_TYPE_ARRAY);
    __uint(max_entries, 1);
    __type(key, int);
    __type(value, __u32);
} allowed_pid_map SEC(".maps");

// Helper function to get the current PID
static __always_inline __u32 get_current_pid_tgid() {
    return bpf_get_current_pid_tgid() >> 32;
}

// XDP program to filter packets by port and process PID
SEC("xdp")
int xdp_filter(struct xdp_md *ctx) {
    void *data_end = (void *)(long)ctx->data_end;
    void *data = (void *)(long)ctx->data;

    struct ethhdr *eth = data;
    if ((void *)(eth + 1) > data_end)
        return XDP_PASS;

    if (eth->h_proto != bpf_htons(ETH_P_IP))
        return XDP_PASS;

    struct iphdr *ip = data + sizeof(struct ethhdr);
    if ((void *)(ip + 1) > data_end)
        return XDP_PASS;

    if (ip->protocol != IPPROTO_TCP)
        return XDP_PASS;

    struct tcphdr *tcp = (void *)ip + (ip->ihl * 4);
    if ((void *)(tcp + 1) > data_end)
        return XDP_PASS;

    // Retrieve the allowed port and PID from the maps
    int key = 0;
    __u16 *allowed_port = bpf_map_lookup_elem(&allowed_port_map, &key);
    if (!allowed_port)
        return XDP_PASS;

    __u32 *allowed_pid = bpf_map_lookup_elem(&allowed_pid_map, &key);
    if (!allowed_pid)
        return XDP_PASS;

    // Get the current process PID
    __u32 pid = get_current_pid_tgid();

    // If the packet is for the allowed process and port, pass it
    if (tcp->dest == bpf_htons(*allowed_port) && pid == *allowed_pid) {
        return XDP_PASS;
    }

    // Otherwise, drop the packet
    return XDP_DROP;
}

char _license[] SEC("license") = "GPL"; 
//user code 
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <linux/bpf.h>
#include <bpf/libbpf.h>

#define PATH_MAX 4096

int get_pid_by_name(const char *name) {
    char cmd[256];
    snprintf(cmd, sizeof(cmd), "pgrep %s", name);
    FILE *fp = popen(cmd, "r");
    if (!fp)
        return -1;

    int pid;
    if (fscanf(fp, "%d", &pid) != 1) {
        pclose(fp);
        return -1;
    }

    pclose(fp);
    return pid;
}

int main(int argc, char **argv) {
    if (argc != 4) {
        fprintf(stderr, "Usage: %s <interface> <port> <process_name>\n", argv[0]);
        return 1;
    }

    char *interface = argv[1];
    __u16 port = atoi(argv[2]);
    char *process_name = argv[3];

    int pid = get_pid_by_name(process_name);
    if (pid == -1) {
        fprintf(stderr, "Error: could not find process named %s\n", process_name);
        return 1;
    }

    struct bpf_object *obj;
    int prog_fd;
    int port_map_fd, pid_map_fd;
    char filename[PATH_MAX];

    snprintf(filename, PATH_MAX, "%s_kern.o", argv[0]);

    obj = bpf_object__open_file(filename, NULL);
    if (libbpf_get_error(obj)) {
        fprintf(stderr, "Error opening BPF object file: %s\n", strerror(errno));
        return 1;
    }

    if (bpf_object__load(obj)) {
        fprintf(stderr, "Error loading BPF object file: %s\n", strerror(errno));
        return 1;
    }

    prog_fd = bpf_program__fd(bpf_object__find_program_by_title(obj, "xdp/xdp_filter"));
    if (prog_fd < 0) {
        fprintf(stderr, "Error finding program: %s\n", strerror(errno));
        return 1;
    }

    port_map_fd = bpf_object__find_map_fd_by_name(obj, "allowed_port_map");
    if (port_map_fd < 0) {
        fprintf(stderr, "Error finding allowed_port_map: %s\n", strerror(errno));
        return 1;
    }

    pid_map_fd = bpf_object__find_map_fd_by_name(obj, "allowed_pid_map");
    if (pid_map_fd < 0) {
        fprintf(stderr, "Error finding allowed_pid_map: %s\n", strerror(errno));
        return 1;
    }

    // Update the port_map and pid_map with the allowed values
    int key = 0;
    if (bpf_map_update_elem(port_map_fd, &key, &port, BPF_ANY)) {
        fprintf(stderr, "Error updating allowed_port_map: %s\n", strerror(errno));
        return 1;
    }

    if (bpf_map_update_elem(pid_map_fd, &key, &pid, BPF_ANY)) {
        fprintf(stderr, "Error updating allowed_pid_map: %s\n", strerror(errno));
        return 1;
    }

    if (bpf_set_link_xdp_fd(if_nametoindex(interface), prog_fd, XDP_FLAGS_UPDATE_IF_NOEXIST) < 0) {
        fprintf(stderr, "Error attaching XDP program: %s\n", strerror(errno));
        return 1;
    }

    printf("Successfully attached XDP program to interface %s to allow traffic on port %d for process %s (PID %d)\n", interface, port, process_name, pid);

    return 0;
}
/* compile ebpf 
clang -O2 -target bpf -c xdp_filter.c -o xdp_filter_kern.o 

Compile the userspace code:
gcc -o xdp_filter xdp_filter_user.c -lbpf 

run program
sudo ./xdp_filter <interface> <port> <process_name>"/ 
